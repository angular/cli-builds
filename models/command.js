"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-global-tslint-disable no-any
const core_1 = require("@angular-devkit/core");
const config_1 = require("../utilities/config");
const interface_1 = require("./interface");
class Command {
    constructor(context, description, logger) {
        this.description = description;
        this.logger = logger;
        this.allowMissingWorkspace = false;
        this.workspace = context.workspace;
    }
    static setCommandMap(map) {
        this.commandMap = map;
    }
    async initialize(options) {
        return;
    }
    async printHelp(options) {
        await this.printHelpUsage();
        await this.printHelpOptions();
        return 0;
    }
    async printJsonHelp(_options) {
        this.logger.info(JSON.stringify(this.description));
        return 0;
    }
    async printHelpUsage() {
        this.logger.info(this.description.description);
        const name = this.description.name;
        const args = this.description.options.filter(x => x.positional !== undefined);
        const opts = this.description.options.filter(x => x.positional === undefined);
        const argDisplay = args && args.length > 0
            ? ' ' + args.map(a => `<${a.name}>`).join(' ')
            : '';
        const optionsDisplay = opts && opts.length > 0
            ? ` [options]`
            : ``;
        this.logger.info(`usage: ng ${name}${argDisplay}${optionsDisplay}`);
        this.logger.info('');
    }
    async printHelpOptions(options = this.description.options) {
        const args = options.filter(opt => opt.positional !== undefined);
        const opts = options.filter(opt => opt.positional === undefined);
        if (args.length > 0) {
            this.logger.info(`arguments:`);
            args.forEach(o => {
                this.logger.info(`  ${core_1.terminal.cyan(o.name)}`);
                if (o.description) {
                    this.logger.info(`    ${o.description}`);
                }
            });
        }
        if (options.length > 0) {
            if (args.length > 0) {
                this.logger.info('');
            }
            this.logger.info(`options:`);
            opts
                .filter(o => !o.hidden)
                .sort((a, b) => a.name.localeCompare(b.name))
                .forEach(o => {
                const aliases = o.aliases && o.aliases.length > 0
                    ? '(' + o.aliases.map(a => `-${a}`).join(' ') + ')'
                    : '';
                this.logger.info(`  ${core_1.terminal.cyan('--' + core_1.strings.dasherize(o.name))} ${aliases}`);
                if (o.description) {
                    this.logger.info(`    ${o.description}`);
                }
            });
        }
    }
    async validateScope() {
        switch (this.description.scope) {
            case interface_1.CommandScope.OutProject:
                if (this.workspace.configFile) {
                    this.logger.fatal(core_1.tags.oneLine `
            The ${this.description.name} command requires to be run outside of a project, but a
            project definition was found at "${this.workspace.configFile}".
          `);
                    throw 1;
                }
                break;
            case interface_1.CommandScope.InProject:
                if (!this.workspace.configFile || config_1.getWorkspace('local') === null) {
                    this.logger.fatal(core_1.tags.oneLine `
            The ${this.description.name} command requires to be run in an Angular project, but a
            project definition could not be found.
          `);
                    throw 1;
                }
                break;
            case interface_1.CommandScope.Everywhere:
                // Can't miss this.
                break;
        }
    }
    async validateAndRun(options) {
        if (!options.help && !options.helpJson) {
            await this.validateScope();
        }
        await this.initialize(options);
        if (options.help) {
            return this.printHelp(options);
        }
        else if (options.helpJson) {
            return this.printJsonHelp(options);
        }
        else {
            return await this.run(options);
        }
    }
}
exports.Command = Command;
//# sourceMappingURL=data:application/json;base64,