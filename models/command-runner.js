"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-global-tslint-disable no-any
const core_1 = require("@angular-devkit/core");
const yargsParser = require("yargs-parser");
const command_1 = require("../models/command");
const project_1 = require("../utilities/project");
// Based off https://en.wikipedia.org/wiki/Levenshtein_distance
// No optimization, really.
function levenshtein(a, b) {
    /* base case: empty strings */
    if (a.length == 0) {
        return b.length;
    }
    if (b.length == 0) {
        return a.length;
    }
    // Test if last characters of the strings match.
    const cost = a[a.length - 1] == b[b.length - 1] ? 0 : 1;
    /* return minimum of delete char from s, delete char from t, and delete char from both */
    return Math.min(levenshtein(a.slice(0, -1), b) + 1, levenshtein(a, b.slice(0, -1)) + 1, levenshtein(a.slice(0, -1), b.slice(0, -1)) + cost);
}
/**
 * Run a command.
 * @param commandMap Map of available commands.
 * @param args Raw unparsed arguments.
 * @param logger The logger to use.
 * @param context Execution context.
 */
function runCommand(commandMap, args, logger, context) {
    return __awaiter(this, void 0, void 0, function* () {
        // if not args supplied, just run the help command.
        if (!args || args.length === 0) {
            args = ['help'];
        }
        const rawOptions = yargsParser(args, { alias: { help: ['h'] }, boolean: ['help'] });
        let commandName = rawOptions._[0] || '';
        // remove the command name
        rawOptions._ = rawOptions._.slice(1);
        const executionScope = project_1.insideProject()
            ? command_1.CommandScope.inProject
            : command_1.CommandScope.outsideProject;
        let Cmd;
        Cmd = commandName ? findCommand(commandMap, commandName) : null;
        if (!Cmd && (rawOptions.v || rawOptions.version)) {
            commandName = 'version';
            Cmd = findCommand(commandMap, commandName);
        }
        else if (!Cmd && (!commandName || rawOptions.help)) {
            commandName = 'help';
            Cmd = findCommand(commandMap, commandName);
        }
        if (!Cmd) {
            if (!commandName) {
                logger.error(core_1.tags.stripIndent `
        We could not find a command from the arguments and the help command seems to be disabled.
        This is an issue with the CLI itself. If you see this comment, please report it and
        provide your repository.
      `);
                return 1;
            }
            else {
                // Set name to string (no undefined).
                const commandsDistance = {};
                const allCommands = listAllCommandNames(commandMap).sort((a, b) => {
                    if (!(a in commandsDistance)) {
                        commandsDistance[a] = levenshtein(a, commandName);
                    }
                    if (!(b in commandsDistance)) {
                        commandsDistance[b] = levenshtein(b, commandName);
                    }
                    return commandsDistance[a] - commandsDistance[b];
                });
                logger.error(core_1.tags.stripIndent `
        The specified command ("${commandName}") is invalid. For a list of available options,
        run "ng help".

        Did you mean "${allCommands[0]}"?
      `);
                return 1;
            }
        }
        const command = new Cmd(context, logger);
        args = yield command.initializeRaw(args);
        let options = parseOptions(args, command.options, command.arguments, command.argStrategy);
        yield command.initialize(options);
        options = parseOptions(args, command.options, command.arguments, command.argStrategy);
        if (commandName === 'help') {
            options.commandMap = commandMap;
        }
        if (options.help) {
            command.printHelp(options);
            return;
        }
        else {
            if (Cmd.scope !== undefined && Cmd.scope !== command_1.CommandScope.everywhere) {
                if (Cmd.scope !== executionScope) {
                    let errorMessage;
                    if (Cmd.scope === command_1.CommandScope.inProject) {
                        errorMessage = `This command can only be run inside of a CLI project.`;
                    }
                    else {
                        errorMessage = `This command can not be run inside of a CLI project.`;
                    }
                    logger.fatal(errorMessage);
                    return 1;
                }
                if (Cmd.scope === command_1.CommandScope.inProject) {
                    if (!context.project.configFile) {
                        logger.fatal('Invalid project: missing workspace file.');
                        return 1;
                    }
                    if (['.angular-cli.json', 'angular-cli.json'].includes(context.project.configFile)) {
                        // --------------------------------------------------------------------------------
                        // If changing this message, please update the same message in
                        // `packages/@angular/cli/bin/ng-update-message.js`
                        const message = core_1.tags.stripIndent `
            The Angular CLI configuration format has been changed, and your existing configuration
            can be updated automatically by running the following command:

              ng update @angular/cli
          `;
                        logger.warn(message);
                        return 1;
                    }
                }
            }
            delete options.h;
            delete options.help;
            const isValid = yield command.validate(options);
            if (!isValid) {
                logger.fatal(`Validation error. Invalid command`);
                return 1;
            }
            return command.run(options);
        }
    });
}
exports.runCommand = runCommand;
function parseOptions(args, cmdOpts, commandArguments, argStrategy) {
    const parser = yargsParser;
    const aliases = cmdOpts.concat()
        .filter(o => o.aliases && o.aliases.length > 0)
        .reduce((aliases, opt) => {
        aliases[opt.name] = (opt.aliases || [])
            .filter(a => a.length === 1);
        return aliases;
    }, {});
    const booleans = cmdOpts
        .filter(o => o.type && o.type === Boolean)
        .map(o => o.name);
    const defaults = cmdOpts
        .filter(o => o.default !== undefined || booleans.indexOf(o.name) !== -1)
        .reduce((defaults, opt) => {
        defaults[opt.name] = opt.default;
        return defaults;
    }, {});
    const strings = cmdOpts
        .filter(o => o.type === String)
        .map(o => o.name);
    const numbers = cmdOpts
        .filter(o => o.type === Number)
        .map(o => o.name);
    aliases.help = ['h'];
    booleans.push('help');
    const yargsOptions = {
        alias: aliases,
        boolean: booleans,
        default: defaults,
        string: strings,
        number: numbers,
    };
    const parsedOptions = parser(args, yargsOptions);
    // Remove aliases.
    cmdOpts
        .filter(o => o.aliases && o.aliases.length > 0)
        .map(o => o.aliases)
        .reduce((allAliases, aliases) => {
        return allAliases.concat([...aliases]);
    }, [])
        .forEach((alias) => {
        delete parsedOptions[alias];
    });
    // Remove undefined booleans
    booleans
        .filter(b => parsedOptions[b] === undefined)
        .map(b => core_1.strings.camelize(b))
        .forEach(b => delete parsedOptions[b]);
    // remove options with dashes.
    Object.keys(parsedOptions)
        .filter(key => key.indexOf('-') !== -1)
        .forEach(key => delete parsedOptions[key]);
    // remove the command name
    parsedOptions._ = parsedOptions._.slice(1);
    switch (argStrategy) {
        case command_1.ArgumentStrategy.MapToOptions:
            parsedOptions._.forEach((value, index) => {
                const arg = commandArguments[index];
                if (arg) {
                    parsedOptions[arg] = value;
                }
            });
            delete parsedOptions._;
            break;
    }
    return parsedOptions;
}
exports.parseOptions = parseOptions;
// Find a command.
function findCommand(map, name) {
    let Cmd = map[name];
    if (!Cmd) {
        // find command via aliases
        Cmd = Object.keys(map)
            .filter(key => {
            if (!map[key].aliases) {
                return false;
            }
            const foundAlias = map[key].aliases
                .filter((alias) => alias === name);
            return foundAlias.length > 0;
        })
            .map((key) => {
            return map[key];
        })[0];
    }
    if (!Cmd) {
        return null;
    }
    return Cmd;
}
function listAllCommandNames(map) {
    return Object.keys(map).concat(Object.keys(map)
        .reduce((acc, key) => {
        if (!map[key].aliases) {
            return acc;
        }
        return acc.concat(map[key].aliases);
    }, []));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1ydW5uZXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXIvY2xpL21vZGVscy9jb21tYW5kLXJ1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7O0FBRUgsaURBQWlEO0FBQ2pELCtDQUE2RTtBQUM3RSw0Q0FBNEM7QUFDNUMsK0NBTTJCO0FBQzNCLGtEQUFxRDtBQU9yRCwrREFBK0Q7QUFDL0QsMkJBQTJCO0FBQzNCLHFCQUFxQixDQUFTLEVBQUUsQ0FBUztJQUN2Qyw4QkFBOEI7SUFDOUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELGdEQUFnRDtJQUNoRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEQseUZBQXlGO0lBQ3pGLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNiLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDbEMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNsQyxXQUFX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QUFDO1lBQ2YsQ0FBQztZQUNELE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPO2lCQUNoQyxNQUFNLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQztZQUU3QyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO2FBQ0QsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDWCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNULE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCw2QkFBNkIsR0FBZTtJQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ2IsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQyxFQUFFLEVBQWMsQ0FBQyxDQUNyQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLy8gdHNsaW50OmRpc2FibGU6bm8tZ2xvYmFsLXRzbGludC1kaXNhYmxlIG5vLWFueVxuaW1wb3J0IHsgbG9nZ2luZywgc3RyaW5ncyBhcyBjb3JlU3RyaW5ncywgdGFncyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCAqIGFzIHlhcmdzUGFyc2VyIGZyb20gJ3lhcmdzLXBhcnNlcic7XG5pbXBvcnQge1xuICBBcmd1bWVudFN0cmF0ZWd5LFxuICBDb21tYW5kQ29uc3RydWN0b3IsXG4gIENvbW1hbmRDb250ZXh0LFxuICBDb21tYW5kU2NvcGUsXG4gIE9wdGlvbixcbn0gZnJvbSAnLi4vbW9kZWxzL2NvbW1hbmQnO1xuaW1wb3J0IHsgaW5zaWRlUHJvamVjdCB9IGZyb20gJy4uL3V0aWxpdGllcy9wcm9qZWN0JztcblxuXG5leHBvcnQgaW50ZXJmYWNlIENvbW1hbmRNYXAge1xuICBba2V5OiBzdHJpbmddOiBDb21tYW5kQ29uc3RydWN0b3I7XG59XG5cbi8vIEJhc2VkIG9mZiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXZlbnNodGVpbl9kaXN0YW5jZVxuLy8gTm8gb3B0aW1pemF0aW9uLCByZWFsbHkuXG5mdW5jdGlvbiBsZXZlbnNodGVpbihhOiBzdHJpbmcsIGI6IHN0cmluZyk6IG51bWJlciB7XG4gIC8qIGJhc2UgY2FzZTogZW1wdHkgc3RyaW5ncyAqL1xuICBpZiAoYS5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiBiLmxlbmd0aDtcbiAgfVxuICBpZiAoYi5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiBhLmxlbmd0aDtcbiAgfVxuXG4gIC8vIFRlc3QgaWYgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSBzdHJpbmdzIG1hdGNoLlxuICBjb25zdCBjb3N0ID0gYVthLmxlbmd0aCAtIDFdID09IGJbYi5sZW5ndGggLSAxXSA/IDAgOiAxO1xuXG4gIC8qIHJldHVybiBtaW5pbXVtIG9mIGRlbGV0ZSBjaGFyIGZyb20gcywgZGVsZXRlIGNoYXIgZnJvbSB0LCBhbmQgZGVsZXRlIGNoYXIgZnJvbSBib3RoICovXG4gIHJldHVybiBNYXRoLm1pbihcbiAgICBsZXZlbnNodGVpbihhLnNsaWNlKDAsIC0xKSwgYikgKyAxLFxuICAgIGxldmVuc2h0ZWluKGEsIGIuc2xpY2UoMCwgLTEpKSArIDEsXG4gICAgbGV2ZW5zaHRlaW4oYS5zbGljZSgwLCAtMSksIGIuc2xpY2UoMCwgLTEpKSArIGNvc3QsXG4gICk7XG59XG5cbi8qKlxuICogUnVuIGEgY29tbWFuZC5cbiAqIEBwYXJhbSBjb21tYW5kTWFwIE1hcCBvZiBhdmFpbGFibGUgY29tbWFuZHMuXG4gKiBAcGFyYW0gYXJncyBSYXcgdW5wYXJzZWQgYXJndW1lbnRzLlxuICogQHBhcmFtIGxvZ2dlciBUaGUgbG9nZ2VyIHRvIHVzZS5cbiAqIEBwYXJhbSBjb250ZXh0IEV4ZWN1dGlvbiBjb250ZXh0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuQ29tbWFuZChjb21tYW5kTWFwOiBDb21tYW5kTWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogQ29tbWFuZENvbnRleHQpOiBQcm9taXNlPG51bWJlciB8IHZvaWQ+IHtcblxuICAvLyBpZiBub3QgYXJncyBzdXBwbGllZCwganVzdCBydW4gdGhlIGhlbHAgY29tbWFuZC5cbiAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgYXJncyA9IFsnaGVscCddO1xuICB9XG4gIGNvbnN0IHJhd09wdGlvbnMgPSB5YXJnc1BhcnNlcihhcmdzLCB7IGFsaWFzOiB7IGhlbHA6IFsnaCddIH0sIGJvb2xlYW46IFsgJ2hlbHAnIF0gfSk7XG4gIGxldCBjb21tYW5kTmFtZSA9IHJhd09wdGlvbnMuX1swXSB8fCAnJztcblxuICAvLyByZW1vdmUgdGhlIGNvbW1hbmQgbmFtZVxuICByYXdPcHRpb25zLl8gPSByYXdPcHRpb25zLl8uc2xpY2UoMSk7XG4gIGNvbnN0IGV4ZWN1dGlvblNjb3BlID0gaW5zaWRlUHJvamVjdCgpXG4gICAgPyBDb21tYW5kU2NvcGUuaW5Qcm9qZWN0XG4gICAgOiBDb21tYW5kU2NvcGUub3V0c2lkZVByb2plY3Q7XG5cbiAgbGV0IENtZDogQ29tbWFuZENvbnN0cnVjdG9yIHwgbnVsbDtcbiAgQ21kID0gY29tbWFuZE5hbWUgPyBmaW5kQ29tbWFuZChjb21tYW5kTWFwLCBjb21tYW5kTmFtZSkgOiBudWxsO1xuXG4gIGlmICghQ21kICYmIChyYXdPcHRpb25zLnYgfHwgcmF3T3B0aW9ucy52ZXJzaW9uKSkge1xuICAgIGNvbW1hbmROYW1lID0gJ3ZlcnNpb24nO1xuICAgIENtZCA9IGZpbmRDb21tYW5kKGNvbW1hbmRNYXAsIGNvbW1hbmROYW1lKTtcbiAgfSBlbHNlIGlmICghQ21kICYmICghY29tbWFuZE5hbWUgfHwgcmF3T3B0aW9ucy5oZWxwKSkge1xuICAgIGNvbW1hbmROYW1lID0gJ2hlbHAnO1xuICAgIENtZCA9IGZpbmRDb21tYW5kKGNvbW1hbmRNYXAsIGNvbW1hbmROYW1lKTtcbiAgfVxuXG4gIGlmICghQ21kKSB7XG4gICAgaWYgKCFjb21tYW5kTmFtZSkge1xuICAgICAgbG9nZ2VyLmVycm9yKHRhZ3Muc3RyaXBJbmRlbnRgXG4gICAgICAgIFdlIGNvdWxkIG5vdCBmaW5kIGEgY29tbWFuZCBmcm9tIHRoZSBhcmd1bWVudHMgYW5kIHRoZSBoZWxwIGNvbW1hbmQgc2VlbXMgdG8gYmUgZGlzYWJsZWQuXG4gICAgICAgIFRoaXMgaXMgYW4gaXNzdWUgd2l0aCB0aGUgQ0xJIGl0c2VsZi4gSWYgeW91IHNlZSB0aGlzIGNvbW1lbnQsIHBsZWFzZSByZXBvcnQgaXQgYW5kXG4gICAgICAgIHByb3ZpZGUgeW91ciByZXBvc2l0b3J5LlxuICAgICAgYCk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXQgbmFtZSB0byBzdHJpbmcgKG5vIHVuZGVmaW5lZCkuXG4gICAgICBjb25zdCBjb21tYW5kc0Rpc3RhbmNlID0ge30gYXMgeyBbbmFtZTogc3RyaW5nXTogbnVtYmVyIH07XG4gICAgICBjb25zdCBhbGxDb21tYW5kcyA9IGxpc3RBbGxDb21tYW5kTmFtZXMoY29tbWFuZE1hcCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoIShhIGluIGNvbW1hbmRzRGlzdGFuY2UpKSB7XG4gICAgICAgICAgY29tbWFuZHNEaXN0YW5jZVthXSA9IGxldmVuc2h0ZWluKGEsIGNvbW1hbmROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShiIGluIGNvbW1hbmRzRGlzdGFuY2UpKSB7XG4gICAgICAgICAgY29tbWFuZHNEaXN0YW5jZVtiXSA9IGxldmVuc2h0ZWluKGIsIGNvbW1hbmROYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21tYW5kc0Rpc3RhbmNlW2FdIC0gY29tbWFuZHNEaXN0YW5jZVtiXTtcbiAgICAgIH0pO1xuXG4gICAgICBsb2dnZXIuZXJyb3IodGFncy5zdHJpcEluZGVudGBcbiAgICAgICAgVGhlIHNwZWNpZmllZCBjb21tYW5kIChcIiR7Y29tbWFuZE5hbWV9XCIpIGlzIGludmFsaWQuIEZvciBhIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbnMsXG4gICAgICAgIHJ1biBcIm5nIGhlbHBcIi5cblxuICAgICAgICBEaWQgeW91IG1lYW4gXCIke2FsbENvbW1hbmRzWzBdfVwiP1xuICAgICAgYCk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgQ21kKGNvbnRleHQsIGxvZ2dlcik7XG5cbiAgYXJncyA9IGF3YWl0IGNvbW1hbmQuaW5pdGlhbGl6ZVJhdyhhcmdzKTtcbiAgbGV0IG9wdGlvbnMgPSBwYXJzZU9wdGlvbnMoYXJncywgY29tbWFuZC5vcHRpb25zLCBjb21tYW5kLmFyZ3VtZW50cywgY29tbWFuZC5hcmdTdHJhdGVneSk7XG4gIGF3YWl0IGNvbW1hbmQuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhhcmdzLCBjb21tYW5kLm9wdGlvbnMsIGNvbW1hbmQuYXJndW1lbnRzLCBjb21tYW5kLmFyZ1N0cmF0ZWd5KTtcbiAgaWYgKGNvbW1hbmROYW1lID09PSAnaGVscCcpIHtcbiAgICBvcHRpb25zLmNvbW1hbmRNYXAgPSBjb21tYW5kTWFwO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGVscCkge1xuICAgIGNvbW1hbmQucHJpbnRIZWxwKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIGlmIChDbWQuc2NvcGUgIT09IHVuZGVmaW5lZCAmJiBDbWQuc2NvcGUgIT09IENvbW1hbmRTY29wZS5ldmVyeXdoZXJlKSB7XG4gICAgICBpZiAoQ21kLnNjb3BlICE9PSBleGVjdXRpb25TY29wZSkge1xuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlO1xuICAgICAgICBpZiAoQ21kLnNjb3BlID09PSBDb21tYW5kU2NvcGUuaW5Qcm9qZWN0KSB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gYFRoaXMgY29tbWFuZCBjYW4gb25seSBiZSBydW4gaW5zaWRlIG9mIGEgQ0xJIHByb2plY3QuYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBgVGhpcyBjb21tYW5kIGNhbiBub3QgYmUgcnVuIGluc2lkZSBvZiBhIENMSSBwcm9qZWN0LmA7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmZhdGFsKGVycm9yTWVzc2FnZSk7XG5cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChDbWQuc2NvcGUgPT09IENvbW1hbmRTY29wZS5pblByb2plY3QpIHtcbiAgICAgICAgaWYgKCFjb250ZXh0LnByb2plY3QuY29uZmlnRmlsZSkge1xuICAgICAgICAgIGxvZ2dlci5mYXRhbCgnSW52YWxpZCBwcm9qZWN0OiBtaXNzaW5nIHdvcmtzcGFjZSBmaWxlLicpO1xuXG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoWycuYW5ndWxhci1jbGkuanNvbicsICdhbmd1bGFyLWNsaS5qc29uJ10uaW5jbHVkZXMoY29udGV4dC5wcm9qZWN0LmNvbmZpZ0ZpbGUpKSB7XG4gICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAvLyBJZiBjaGFuZ2luZyB0aGlzIG1lc3NhZ2UsIHBsZWFzZSB1cGRhdGUgdGhlIHNhbWUgbWVzc2FnZSBpblxuICAgICAgICAgIC8vIGBwYWNrYWdlcy9AYW5ndWxhci9jbGkvYmluL25nLXVwZGF0ZS1tZXNzYWdlLmpzYFxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0YWdzLnN0cmlwSW5kZW50YFxuICAgICAgICAgICAgVGhlIEFuZ3VsYXIgQ0xJIGNvbmZpZ3VyYXRpb24gZm9ybWF0IGhhcyBiZWVuIGNoYW5nZWQsIGFuZCB5b3VyIGV4aXN0aW5nIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgIGNhbiBiZSB1cGRhdGVkIGF1dG9tYXRpY2FsbHkgYnkgcnVubmluZyB0aGUgZm9sbG93aW5nIGNvbW1hbmQ6XG5cbiAgICAgICAgICAgICAgbmcgdXBkYXRlIEBhbmd1bGFyL2NsaVxuICAgICAgICAgIGA7XG5cbiAgICAgICAgICBsb2dnZXIud2FybihtZXNzYWdlKTtcblxuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdGlvbnMuaDtcbiAgICBkZWxldGUgb3B0aW9ucy5oZWxwO1xuXG4gICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGNvbW1hbmQudmFsaWRhdGUob3B0aW9ucyk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICBsb2dnZXIuZmF0YWwoYFZhbGlkYXRpb24gZXJyb3IuIEludmFsaWQgY29tbWFuZGApO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbWFuZC5ydW4ob3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlT3B0aW9uczxUID0gYW55PihcbiAgYXJnczogc3RyaW5nW10sXG4gIGNtZE9wdHM6IE9wdGlvbltdLFxuICBjb21tYW5kQXJndW1lbnRzOiBzdHJpbmdbXSxcbiAgYXJnU3RyYXRlZ3k6IEFyZ3VtZW50U3RyYXRlZ3ksXG4pOiBUIHtcbiAgY29uc3QgcGFyc2VyID0geWFyZ3NQYXJzZXI7XG5cbiAgY29uc3QgYWxpYXNlcyA9IGNtZE9wdHMuY29uY2F0KClcbiAgICAuZmlsdGVyKG8gPT4gby5hbGlhc2VzICYmIG8uYWxpYXNlcy5sZW5ndGggPiAwKVxuICAgIC5yZWR1Y2UoKGFsaWFzZXM6IGFueSwgb3B0OiBPcHRpb24pID0+IHtcbiAgICAgIGFsaWFzZXNbb3B0Lm5hbWVdID0gKG9wdC5hbGlhc2VzIHx8IFtdKVxuICAgICAgICAuZmlsdGVyKGEgPT4gYS5sZW5ndGggPT09IDEpO1xuXG4gICAgICByZXR1cm4gYWxpYXNlcztcbiAgICB9LCB7fSk7XG5cbiAgY29uc3QgYm9vbGVhbnMgPSBjbWRPcHRzXG4gICAgLmZpbHRlcihvID0+IG8udHlwZSAmJiBvLnR5cGUgPT09IEJvb2xlYW4pXG4gICAgLm1hcChvID0+IG8ubmFtZSk7XG5cbiAgY29uc3QgZGVmYXVsdHMgPSBjbWRPcHRzXG4gICAgLmZpbHRlcihvID0+IG8uZGVmYXVsdCAhPT0gdW5kZWZpbmVkIHx8IGJvb2xlYW5zLmluZGV4T2Yoby5uYW1lKSAhPT0gLTEpXG4gICAgLnJlZHVjZSgoZGVmYXVsdHM6IGFueSwgb3B0OiBPcHRpb24pID0+IHtcbiAgICAgIGRlZmF1bHRzW29wdC5uYW1lXSA9IG9wdC5kZWZhdWx0O1xuXG4gICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfSwge30pO1xuXG4gIGNvbnN0IHN0cmluZ3MgPSBjbWRPcHRzXG4gICAgLmZpbHRlcihvID0+IG8udHlwZSA9PT0gU3RyaW5nKVxuICAgIC5tYXAobyA9PiBvLm5hbWUpO1xuXG4gIGNvbnN0IG51bWJlcnMgPSBjbWRPcHRzXG4gICAgLmZpbHRlcihvID0+IG8udHlwZSA9PT0gTnVtYmVyKVxuICAgIC5tYXAobyA9PiBvLm5hbWUpO1xuXG5cbiAgYWxpYXNlcy5oZWxwID0gWydoJ107XG4gIGJvb2xlYW5zLnB1c2goJ2hlbHAnKTtcblxuICBjb25zdCB5YXJnc09wdGlvbnMgPSB7XG4gICAgYWxpYXM6IGFsaWFzZXMsXG4gICAgYm9vbGVhbjogYm9vbGVhbnMsXG4gICAgZGVmYXVsdDogZGVmYXVsdHMsXG4gICAgc3RyaW5nOiBzdHJpbmdzLFxuICAgIG51bWJlcjogbnVtYmVycyxcbiAgfTtcblxuICBjb25zdCBwYXJzZWRPcHRpb25zID0gcGFyc2VyKGFyZ3MsIHlhcmdzT3B0aW9ucyk7XG5cbiAgLy8gUmVtb3ZlIGFsaWFzZXMuXG4gIGNtZE9wdHNcbiAgICAuZmlsdGVyKG8gPT4gby5hbGlhc2VzICYmIG8uYWxpYXNlcy5sZW5ndGggPiAwKVxuICAgIC5tYXAobyA9PiBvLmFsaWFzZXMpXG4gICAgLnJlZHVjZSgoYWxsQWxpYXNlczogYW55LCBhbGlhc2VzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgcmV0dXJuIGFsbEFsaWFzZXMuY29uY2F0KFsuLi5hbGlhc2VzXSk7XG4gICAgfSwgW10pXG4gICAgLmZvckVhY2goKGFsaWFzOiBzdHJpbmcpID0+IHtcbiAgICAgIGRlbGV0ZSBwYXJzZWRPcHRpb25zW2FsaWFzXTtcbiAgICB9KTtcblxuICAvLyBSZW1vdmUgdW5kZWZpbmVkIGJvb2xlYW5zXG4gIGJvb2xlYW5zXG4gICAgLmZpbHRlcihiID0+IHBhcnNlZE9wdGlvbnNbYl0gPT09IHVuZGVmaW5lZClcbiAgICAubWFwKGIgPT4gY29yZVN0cmluZ3MuY2FtZWxpemUoYikpXG4gICAgLmZvckVhY2goYiA9PiBkZWxldGUgcGFyc2VkT3B0aW9uc1tiXSk7XG5cbiAgLy8gcmVtb3ZlIG9wdGlvbnMgd2l0aCBkYXNoZXMuXG4gIE9iamVjdC5rZXlzKHBhcnNlZE9wdGlvbnMpXG4gICAgLmZpbHRlcihrZXkgPT4ga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEpXG4gICAgLmZvckVhY2goa2V5ID0+IGRlbGV0ZSBwYXJzZWRPcHRpb25zW2tleV0pO1xuXG4gIC8vIHJlbW92ZSB0aGUgY29tbWFuZCBuYW1lXG4gIHBhcnNlZE9wdGlvbnMuXyA9IHBhcnNlZE9wdGlvbnMuXy5zbGljZSgxKTtcblxuICBzd2l0Y2ggKGFyZ1N0cmF0ZWd5KSB7XG4gICAgY2FzZSBBcmd1bWVudFN0cmF0ZWd5Lk1hcFRvT3B0aW9uczpcbiAgICAgIHBhcnNlZE9wdGlvbnMuXy5mb3JFYWNoKCh2YWx1ZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyZyA9IGNvbW1hbmRBcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICBpZiAoYXJnKSB7XG4gICAgICAgICAgcGFyc2VkT3B0aW9uc1thcmddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBkZWxldGUgcGFyc2VkT3B0aW9ucy5fO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gcGFyc2VkT3B0aW9ucztcbn1cblxuLy8gRmluZCBhIGNvbW1hbmQuXG5mdW5jdGlvbiBmaW5kQ29tbWFuZChtYXA6IENvbW1hbmRNYXAsIG5hbWU6IHN0cmluZyk6IENvbW1hbmRDb25zdHJ1Y3RvciB8IG51bGwge1xuICBsZXQgQ21kOiBDb21tYW5kQ29uc3RydWN0b3IgPSBtYXBbbmFtZV07XG5cbiAgaWYgKCFDbWQpIHtcbiAgICAvLyBmaW5kIGNvbW1hbmQgdmlhIGFsaWFzZXNcbiAgICBDbWQgPSBPYmplY3Qua2V5cyhtYXApXG4gICAgICAuZmlsdGVyKGtleSA9PiB7XG4gICAgICAgIGlmICghbWFwW2tleV0uYWxpYXNlcykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3VuZEFsaWFzID0gbWFwW2tleV0uYWxpYXNlc1xuICAgICAgICAgIC5maWx0ZXIoKGFsaWFzOiBzdHJpbmcpID0+IGFsaWFzID09PSBuYW1lKTtcblxuICAgICAgICByZXR1cm4gZm91bmRBbGlhcy5sZW5ndGggPiAwO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gbWFwW2tleV07XG4gICAgICB9KVswXTtcbiAgfVxuXG4gIGlmICghQ21kKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gQ21kO1xufVxuXG5mdW5jdGlvbiBsaXN0QWxsQ29tbWFuZE5hbWVzKG1hcDogQ29tbWFuZE1hcCk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcCkuY29uY2F0KFxuICAgIE9iamVjdC5rZXlzKG1hcClcbiAgICAgIC5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGlmICghbWFwW2tleV0uYWxpYXNlcykge1xuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChtYXBba2V5XS5hbGlhc2VzKTtcbiAgICAgIH0sIFtdIGFzIHN0cmluZ1tdKSxcbiAgKTtcbn1cbiJdfQ==