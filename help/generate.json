{
  "name": "generate",
  "description": "Generates and/or modifies files based on a schematic.",
  "options": [
    {
      "name": "schematic",
      "description": "The schematic or collection:schematic to generate.",
      "type": "string",
      "required": false,
      "aliases": [],
      "hidden": false,
      "positional": 0,
      "subcommands": {
        "appShell": {
          "name": "appShell",
          "description": "Generates an app shell for running a server-side version of an app.",
          "options": [
            {
              "name": "clientProject",
              "description": "The name of the related client app.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "route",
              "description": "Route path used to produce the app shell.",
              "type": "string",
              "default": "shell",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "appId",
              "description": "The app ID to use in withServerTransition().",
              "type": "string",
              "default": "serverApp",
              "required": false,
              "aliases": [],
              "format": "html-selector",
              "hidden": false
            },
            {
              "name": "main",
              "description": "The name of the main entry-point file.",
              "type": "string",
              "default": "main.server.ts",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": false
            },
            {
              "name": "appDir",
              "description": "The name of the application directory.",
              "type": "string",
              "default": "app",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": false
            },
            {
              "name": "rootModuleFileName",
              "description": "The name of the root module file",
              "type": "string",
              "default": "app.server.module.ts",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": false
            },
            {
              "name": "rootModuleClassName",
              "description": "The name of the root module class.",
              "type": "string",
              "default": "AppServerModule",
              "required": false,
              "aliases": [],
              "format": "html-selector",
              "hidden": false
            },
            {
              "name": "tsconfigFileName",
              "description": "The name of the TypeScript configuration file.",
              "type": "string",
              "default": "tsconfig.server",
              "required": false,
              "aliases": [],
              "hidden": false,
              "deprecated": "This option has no effect."
            }
          ],
          "aliases": []
        },
        "application": {
          "name": "application",
          "description": "Generates a new basic app definition in the \"projects\" subfolder of the workspace.",
          "options": [
            {
              "name": "projectRoot",
              "description": "The root directory of the new app.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": true
            },
            {
              "name": "name",
              "description": "The name of the new app.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "inlineStyle",
              "description": "When true, includes styles inline in the root component.ts file. Only CSS styles can be included inline. Default is false, meaning that an external styles file is created and referenced in the root component.ts file.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [
                "s"
              ],
              "hidden": false,
              "userAnalytics": 9
            },
            {
              "name": "inlineTemplate",
              "description": "When true, includes template inline in the root component.ts file. Default is false, meaning that an external template file is created and referenced in the root component.ts file. ",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [
                "t"
              ],
              "hidden": false,
              "userAnalytics": 10
            },
            {
              "name": "viewEncapsulation",
              "description": "The view encapsulation strategy to use in the new app.",
              "type": "string",
              "enum": [
                "Emulated",
                "Native",
                "None",
                "ShadowDom"
              ],
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 11
            },
            {
              "name": "routing",
              "description": "When true, creates a routing NgModule.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 17
            },
            {
              "name": "prefix",
              "description": "A prefix to apply to generated selectors.",
              "type": "string",
              "default": "app",
              "required": false,
              "aliases": [
                "p"
              ],
              "format": "html-selector",
              "hidden": false
            },
            {
              "name": "style",
              "description": "The file extension or preprocessor to use for style files.",
              "type": "string",
              "default": "css",
              "enum": [
                "css",
                "scss",
                "sass",
                "less",
                "styl"
              ],
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 5
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the app.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [
                "S"
              ],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "skipPackageJson",
              "description": "When true, does not add dependencies to the \"package.json\" file.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "minimal",
              "description": "When true, creates a bare-bones project without any testing frameworks. (Use for learning purposes only.)",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 14
            },
            {
              "name": "skipInstall",
              "description": "Skip installing dependency packages.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the application.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            },
            {
              "name": "strict",
              "description": "Creates an application with stricter build optimization options.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "legacyBrowsers",
              "description": "Add support for legacy browsers like Internet Explorer using differential loading.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            }
          ],
          "aliases": []
        },
        "class": {
          "name": "class",
          "description": "Creates a new generic class definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the new class.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the class, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new class.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "type",
              "description": "Adds a developer-defined type to the filename, in the format \"name.type.ts\".",
              "type": "string",
              "default": "",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the class.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "component": {
          "name": "component",
          "description": "Creates a new generic component definition in the given or default project.",
          "options": [
            {
              "name": "path",
              "description": "The path at which to create the component file, relative to the current workspace. Default is a folder with the same name as the component in the project root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "name",
              "description": "The name of the component.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "displayBlock",
              "description": "Specifies if the style will contain `:host { display: block; }`.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [
                "b"
              ],
              "hidden": false
            },
            {
              "name": "inlineStyle",
              "description": "When true, includes styles inline in the component.ts file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the component.ts file.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [
                "s"
              ],
              "hidden": false,
              "userAnalytics": 9
            },
            {
              "name": "inlineTemplate",
              "description": "When true, includes template inline in the component.ts file. By default, an external template file is created and referenced in the component.ts file.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [
                "t"
              ],
              "hidden": false,
              "userAnalytics": 10
            },
            {
              "name": "viewEncapsulation",
              "description": "The view encapsulation strategy to use in the new component.",
              "type": "string",
              "enum": [
                "Emulated",
                "Native",
                "None",
                "ShadowDom"
              ],
              "required": false,
              "aliases": [
                "v"
              ],
              "hidden": false,
              "userAnalytics": 11
            },
            {
              "name": "changeDetection",
              "description": "The change detection strategy to use in the new component.",
              "type": "string",
              "default": "Default",
              "enum": [
                "Default",
                "OnPush"
              ],
              "required": false,
              "aliases": [
                "c"
              ],
              "hidden": false
            },
            {
              "name": "prefix",
              "description": "The prefix to apply to the generated component selector.",
              "type": "string",
              "required": false,
              "aliases": [
                "p"
              ],
              "hidden": false
            },
            {
              "name": "style",
              "description": "The file extension or preprocessor to use for style files.",
              "type": "string",
              "default": "css",
              "enum": [
                "css",
                "scss",
                "sass",
                "less",
                "styl"
              ],
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 5
            },
            {
              "name": "type",
              "description": "Adds a developer-defined type to the filename, in the format \"name.type.ts\".",
              "type": "string",
              "default": "Component",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new component.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "flat",
              "description": "When true, creates the new files at the top level of the current project.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipImport",
              "description": "When true, does not import this component into the owning NgModule.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 18
            },
            {
              "name": "selector",
              "description": "The HTML selector to use for this component.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "html-selector",
              "hidden": false
            },
            {
              "name": "skipSelector",
              "description": "Specifies if the component should have a selector or not.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "module",
              "description": "The declaring NgModule.",
              "type": "string",
              "required": false,
              "aliases": [
                "m"
              ],
              "hidden": false
            },
            {
              "name": "export",
              "description": "When true, the declaring NgModule exports this component.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 19
            },
            {
              "name": "entryComponent",
              "description": "When true, the new component is the entry component of the declaring NgModule.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "deprecated": "Since version 9.0.0 with Ivy, entryComponents is no longer necessary."
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the component.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "directive": {
          "name": "directive",
          "description": "Creates a new generic directive definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the new directive.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the interface that defines the directive, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "prefix",
              "description": "A prefix to apply to generated selectors.",
              "type": "string",
              "required": false,
              "aliases": [
                "p"
              ],
              "hidden": false
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new class.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "skipImport",
              "description": "When true, does not import this directive into the owning NgModule.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 18
            },
            {
              "name": "selector",
              "description": "The HTML selector to use for this directive.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "html-selector",
              "hidden": false
            },
            {
              "name": "flat",
              "description": "When true (the default), creates the new files at the top level of the current project.",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "module",
              "description": "The declaring NgModule.",
              "type": "string",
              "required": false,
              "aliases": [
                "m"
              ],
              "hidden": false
            },
            {
              "name": "export",
              "description": "When true, the declaring NgModule exports this directive.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 19
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the directive.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "enum": {
          "name": "enum",
          "description": "Generates a new, generic enum definition for the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the enum.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the enum definition, relative to the current workspace.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project in which to create the enum. Default is the configured default project for the workspace.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the enum.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "guard": {
          "name": "guard",
          "description": "Generates a new, generic route guard definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the new route guard.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new guard.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "flat",
              "description": "When true (the default), creates the new files at the top level of the current project.",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "path",
              "description": "The path at which to create the interface that defines the guard, relative to the current workspace.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the guard.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            },
            {
              "name": "implements",
              "description": "Specifies which interfaces to implement.",
              "type": "array",
              "required": false,
              "aliases": [],
              "hidden": false
            }
          ],
          "aliases": []
        },
        "interceptor": {
          "name": "interceptor",
          "description": "Creates a new, generic interceptor definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the interceptor.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the interceptor, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "flat",
              "description": "When true (the default), creates files at the top level of the project.",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new interceptor.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the interceptor.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "interface": {
          "name": "interface",
          "description": "Creates a new generic interface definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the interface.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the interface, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "prefix",
              "description": "A prefix to apply to generated selectors.",
              "type": "string",
              "default": "",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the interface.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            },
            {
              "name": "type",
              "description": "Adds a developer-defined type to the filename, in the format \"name.type.ts\".",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 1
            }
          ],
          "aliases": []
        },
        "library": {
          "name": "library",
          "description": "Creates a new generic library project in the current workspace.",
          "options": [
            {
              "name": "name",
              "description": "The name of the library.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "entryFile",
              "description": "The path at which to create the library's public API file, relative to the workspace root.",
              "type": "string",
              "default": "public-api",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": false
            },
            {
              "name": "prefix",
              "description": "A prefix to apply to generated selectors.",
              "type": "string",
              "default": "lib",
              "required": false,
              "aliases": [
                "p"
              ],
              "format": "html-selector",
              "hidden": false
            },
            {
              "name": "skipPackageJson",
              "description": "When true, does not add dependencies to the \"package.json\" file. ",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipInstall",
              "description": "When true, does not install dependency packages.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipTsConfig",
              "description": "When true, does not update \"tsconfig.base.json\" to add a path mapping for the new library. The path mapping is needed to use the library in an app, but can be disabled here to simplify development.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the library.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "module": {
          "name": "module",
          "description": "Creates a new generic NgModule definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the NgModule.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the NgModule, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "routing",
              "description": "When true, creates a routing module.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 17
            },
            {
              "name": "routingScope",
              "description": "The scope for the new routing module.",
              "type": "string",
              "default": "Child",
              "enum": [
                "Child",
                "Root"
              ],
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "route",
              "description": "The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the `Routes` array declared in the module provided in the `--module` option.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "flat",
              "description": "When true, creates the new files at the top level of the current project root. ",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "commonModule",
              "description": "When true, the new NgModule imports \"CommonModule\". ",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": true
            },
            {
              "name": "module",
              "description": "The declaring NgModule.",
              "type": "string",
              "required": false,
              "aliases": [
                "m"
              ],
              "hidden": false
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the module.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "pipe": {
          "name": "pipe",
          "description": "Creates a new generic pipe definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the pipe.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the pipe, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "flat",
              "description": "When true (the default) creates files at the top level of the project.",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new pipe.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "skipImport",
              "description": "When true, does not import this pipe into the owning NgModule.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 18
            },
            {
              "name": "module",
              "description": "The declaring NgModule.",
              "type": "string",
              "required": false,
              "aliases": [
                "m"
              ],
              "hidden": false
            },
            {
              "name": "export",
              "description": "When true, the declaring NgModule exports this pipe.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 19
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the pipe.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "service": {
          "name": "service",
          "description": "Creates a new, generic service definition in the given or default project.",
          "options": [
            {
              "name": "name",
              "description": "The name of the service.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "path",
              "description": "The path at which to create the service, relative to the workspace root.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "flat",
              "description": "When true (the default), creates files at the top level of the project.",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "skipTests",
              "description": "When true, does not create \"spec.ts\" test files for the new service.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 12
            },
            {
              "name": "lintFix",
              "description": "When true, applies lint fixes after generating the service.",
              "type": "boolean",
              "default": false,
              "required": false,
              "aliases": [],
              "hidden": false,
              "userAnalytics": 15
            }
          ],
          "aliases": []
        },
        "serviceWorker": {
          "name": "serviceWorker",
          "description": "Pass this schematic to the \"run\" command to create a service worker",
          "options": [
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "target",
              "description": "The target to apply service worker to.",
              "type": "string",
              "default": "build",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "configuration",
              "description": "The configuration to apply service worker to.",
              "type": "string",
              "default": "production",
              "required": false,
              "aliases": [],
              "hidden": false
            }
          ],
          "aliases": []
        },
        "webWorker": {
          "name": "webWorker",
          "description": "Creates a new generic web worker definition in the given or default project.",
          "options": [
            {
              "name": "path",
              "description": "The path at which to create the worker file, relative to the current workspace.",
              "type": "string",
              "required": false,
              "aliases": [],
              "format": "path",
              "hidden": true
            },
            {
              "name": "project",
              "description": "The name of the project.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "target",
              "description": "The target to apply web worker to.",
              "type": "string",
              "default": "build",
              "required": false,
              "aliases": [],
              "hidden": false
            },
            {
              "name": "name",
              "description": "The name of the worker.",
              "type": "string",
              "required": false,
              "aliases": [],
              "hidden": false,
              "positional": 0
            },
            {
              "name": "snippet",
              "description": "Add a worker creation snippet in a sibling file of the same name.",
              "type": "boolean",
              "default": true,
              "required": false,
              "aliases": [],
              "hidden": false
            }
          ],
          "aliases": []
        }
      }
    },
    {
      "name": "help",
      "description": "Shows a help message for this command in the console.",
      "type": "boolean",
      "types": [
        "boolean",
        "string"
      ],
      "default": false,
      "enum": [
        true,
        false,
        "json",
        "JSON"
      ],
      "required": false,
      "aliases": [],
      "hidden": false
    },
    {
      "name": "dryRun",
      "description": "When true, runs through and reports activity without writing out results.",
      "type": "boolean",
      "default": false,
      "required": false,
      "aliases": [
        "d"
      ],
      "hidden": false
    },
    {
      "name": "force",
      "description": "When true, forces overwriting of existing files.",
      "type": "boolean",
      "default": false,
      "required": false,
      "aliases": [
        "f"
      ],
      "hidden": false
    },
    {
      "name": "interactive",
      "description": "When false, disables interactive input prompts.",
      "type": "boolean",
      "required": false,
      "aliases": [],
      "hidden": false
    },
    {
      "name": "defaults",
      "description": "When true, disables interactive input prompts for options with a default.",
      "type": "boolean",
      "required": false,
      "aliases": [],
      "hidden": false
    }
  ],
  "aliases": [
    "g"
  ],
  "scope": "in",
  "hidden": false
}